// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GateServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GateServer {

namespace {

const ::google::protobuf::Descriptor* Heart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heart_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerList_GameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerList_GameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerList_GameServer_Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerList_GameServer_Game_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VERSION_NUMBER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESPONSE_MSG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GateServer_2eproto() {
  protobuf_AddDesc_GateServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GateServer.proto");
  GOOGLE_CHECK(file != NULL);
  Heart_descriptor_ = file->message_type(0);
  static const int Heart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, timestamp_),
  };
  Heart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heart_descriptor_,
      Heart::default_instance_,
      Heart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heart));
  GameServerList_descriptor_ = file->message_type(1);
  static const int GameServerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList, servers_),
  };
  GameServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerList_descriptor_,
      GameServerList::default_instance_,
      GameServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerList));
  GameServerList_GameServer_descriptor_ = GameServerList_descriptor_->nested_type(0);
  static const int GameServerList_GameServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer, games_),
  };
  GameServerList_GameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerList_GameServer_descriptor_,
      GameServerList_GameServer::default_instance_,
      GameServerList_GameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerList_GameServer));
  GameServerList_GameServer_Game_descriptor_ = GameServerList_GameServer_descriptor_->nested_type(0);
  static const int GameServerList_GameServer_Game_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, private__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, maxplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, playes_),
  };
  GameServerList_GameServer_Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerList_GameServer_Game_descriptor_,
      GameServerList_GameServer_Game::default_instance_,
      GameServerList_GameServer_Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerList_GameServer_Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerList_GameServer_Game));
  VERSION_NUMBER_descriptor_ = file->enum_type(0);
  RESPONSE_MSG_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GateServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heart_descriptor_, &Heart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerList_descriptor_, &GameServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerList_GameServer_descriptor_, &GameServerList_GameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerList_GameServer_Game_descriptor_, &GameServerList_GameServer_Game::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GateServer_2eproto() {
  delete Heart::default_instance_;
  delete Heart_reflection_;
  delete GameServerList::default_instance_;
  delete GameServerList_reflection_;
  delete GameServerList_GameServer::default_instance_;
  delete GameServerList_GameServer_reflection_;
  delete GameServerList_GameServer_Game::default_instance_;
  delete GameServerList_GameServer_Game_reflection_;
}

void protobuf_AddDesc_GateServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GateServer.proto\022\nGateServer\"\032\n\005Heart\022"
    "\021\n\ttimestamp\030\001 \002(\005\"\224\002\n\016GameServerList\0226\n"
    "\007servers\030\001 \003(\0132%.GateServer.GameServerLi"
    "st.GameServer\032\311\001\n\nGameServer\022\n\n\002ip\030\001 \002(\t"
    "\022\014\n\004port\030\002 \002(\005\0229\n\005games\030\003 \003(\0132*.GateServ"
    "er.GameServerList.GameServer.Game\032f\n\004Gam"
    "e\022\017\n\007private\030\001 \002(\010\022\016\n\006gameid\030\002 \002(\005\022\014\n\004mo"
    "de\030\003 \002(\005\022\013\n\003map\030\004 \002(\005\022\022\n\nmaxPlayers\030\005 \002("
    "\005\022\016\n\006playes\030\006 \003(\005*\037\n\016VERSION_NUMBER\022\r\n\007V"
    "ERSION\020\200\200\004*/\n\014RESPONSE_MSG\022\t\n\005HEART\020\000\022\024\n"
    "\020GAME_SERVER_LIST\020\001B\002H\001", 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GateServer.proto", &protobuf_RegisterTypes);
  Heart::default_instance_ = new Heart();
  GameServerList::default_instance_ = new GameServerList();
  GameServerList_GameServer::default_instance_ = new GameServerList_GameServer();
  GameServerList_GameServer_Game::default_instance_ = new GameServerList_GameServer_Game();
  Heart::default_instance_->InitAsDefaultInstance();
  GameServerList::default_instance_->InitAsDefaultInstance();
  GameServerList_GameServer::default_instance_->InitAsDefaultInstance();
  GameServerList_GameServer_Game::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GateServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GateServer_2eproto {
  StaticDescriptorInitializer_GateServer_2eproto() {
    protobuf_AddDesc_GateServer_2eproto();
  }
} static_descriptor_initializer_GateServer_2eproto_;
const ::google::protobuf::EnumDescriptor* VERSION_NUMBER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VERSION_NUMBER_descriptor_;
}
bool VERSION_NUMBER_IsValid(int value) {
  switch(value) {
    case 65536:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESPONSE_MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESPONSE_MSG_descriptor_;
}
bool RESPONSE_MSG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Heart::kTimestampFieldNumber;
#endif  // !_MSC_VER

Heart::Heart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateServer.Heart)
}

void Heart::InitAsDefaultInstance() {
}

Heart::Heart(const Heart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GateServer.Heart)
}

void Heart::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heart::~Heart() {
  // @@protoc_insertion_point(destructor:GateServer.Heart)
  SharedDtor();
}

void Heart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heart_descriptor_;
}

const Heart& Heart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateServer_2eproto();
  return *default_instance_;
}

Heart* Heart::default_instance_ = NULL;

Heart* Heart::New() const {
  return new Heart;
}

void Heart::Clear() {
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateServer.Heart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateServer.Heart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateServer.Heart)
  return false;
#undef DO_
}

void Heart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateServer.Heart)
  // required int32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateServer.Heart)
}

::google::protobuf::uint8* Heart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateServer.Heart)
  // required int32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateServer.Heart)
  return target;
}

int Heart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heart::MergeFrom(const Heart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heart::CopyFrom(const Heart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Heart::Swap(Heart* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heart_descriptor_;
  metadata.reflection = Heart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerList_GameServer_Game::kPrivateFieldNumber;
const int GameServerList_GameServer_Game::kGameidFieldNumber;
const int GameServerList_GameServer_Game::kModeFieldNumber;
const int GameServerList_GameServer_Game::kMapFieldNumber;
const int GameServerList_GameServer_Game::kMaxPlayersFieldNumber;
const int GameServerList_GameServer_Game::kPlayesFieldNumber;
#endif  // !_MSC_VER

GameServerList_GameServer_Game::GameServerList_GameServer_Game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateServer.GameServerList.GameServer.Game)
}

void GameServerList_GameServer_Game::InitAsDefaultInstance() {
}

GameServerList_GameServer_Game::GameServerList_GameServer_Game(const GameServerList_GameServer_Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GateServer.GameServerList.GameServer.Game)
}

void GameServerList_GameServer_Game::SharedCtor() {
  _cached_size_ = 0;
  private__ = false;
  gameid_ = 0;
  mode_ = 0;
  map_ = 0;
  maxplayers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerList_GameServer_Game::~GameServerList_GameServer_Game() {
  // @@protoc_insertion_point(destructor:GateServer.GameServerList.GameServer.Game)
  SharedDtor();
}

void GameServerList_GameServer_Game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameServerList_GameServer_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerList_GameServer_Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerList_GameServer_Game_descriptor_;
}

const GameServerList_GameServer_Game& GameServerList_GameServer_Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateServer_2eproto();
  return *default_instance_;
}

GameServerList_GameServer_Game* GameServerList_GameServer_Game::default_instance_ = NULL;

GameServerList_GameServer_Game* GameServerList_GameServer_Game::New() const {
  return new GameServerList_GameServer_Game;
}

void GameServerList_GameServer_Game::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameServerList_GameServer_Game*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(private__, map_);
    maxplayers_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  playes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerList_GameServer_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateServer.GameServerList.GameServer.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool private = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
          set_has_private_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required int32 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map;
        break;
      }

      // required int32 map = 4;
      case 4: {
        if (tag == 32) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxPlayers;
        break;
      }

      // required int32 maxPlayers = 5;
      case 5: {
        if (tag == 40) {
         parse_maxPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
          set_has_maxplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playes;
        break;
      }

      // repeated int32 playes = 6;
      case 6: {
        if (tag == 48) {
         parse_playes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_playes())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateServer.GameServerList.GameServer.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateServer.GameServerList.GameServer.Game)
  return false;
#undef DO_
}

void GameServerList_GameServer_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateServer.GameServerList.GameServer.Game)
  // required bool private = 1;
  if (has_private_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->private_(), output);
  }

  // required int32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // required int32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // required int32 map = 4;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map(), output);
  }

  // required int32 maxPlayers = 5;
  if (has_maxplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxplayers(), output);
  }

  // repeated int32 playes = 6;
  for (int i = 0; i < this->playes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->playes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateServer.GameServerList.GameServer.Game)
}

::google::protobuf::uint8* GameServerList_GameServer_Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateServer.GameServerList.GameServer.Game)
  // required bool private = 1;
  if (has_private_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->private_(), target);
  }

  // required int32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // required int32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // required int32 map = 4;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map(), target);
  }

  // required int32 maxPlayers = 5;
  if (has_maxplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxplayers(), target);
  }

  // repeated int32 playes = 6;
  for (int i = 0; i < this->playes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->playes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateServer.GameServerList.GameServer.Game)
  return target;
}

int GameServerList_GameServer_Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool private = 1;
    if (has_private_()) {
      total_size += 1 + 1;
    }

    // required int32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // required int32 map = 4;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map());
    }

    // required int32 maxPlayers = 5;
    if (has_maxplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayers());
    }

  }
  // repeated int32 playes = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->playes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playes(i));
    }
    total_size += 1 * this->playes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerList_GameServer_Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerList_GameServer_Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerList_GameServer_Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerList_GameServer_Game::MergeFrom(const GameServerList_GameServer_Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  playes_.MergeFrom(from.playes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_()) {
      set_private_(from.private_());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_maxplayers()) {
      set_maxplayers(from.maxplayers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerList_GameServer_Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerList_GameServer_Game::CopyFrom(const GameServerList_GameServer_Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerList_GameServer_Game::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GameServerList_GameServer_Game::Swap(GameServerList_GameServer_Game* other) {
  if (other != this) {
    std::swap(private__, other->private__);
    std::swap(gameid_, other->gameid_);
    std::swap(mode_, other->mode_);
    std::swap(map_, other->map_);
    std::swap(maxplayers_, other->maxplayers_);
    playes_.Swap(&other->playes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerList_GameServer_Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerList_GameServer_Game_descriptor_;
  metadata.reflection = GameServerList_GameServer_Game_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameServerList_GameServer::kIpFieldNumber;
const int GameServerList_GameServer::kPortFieldNumber;
const int GameServerList_GameServer::kGamesFieldNumber;
#endif  // !_MSC_VER

GameServerList_GameServer::GameServerList_GameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateServer.GameServerList.GameServer)
}

void GameServerList_GameServer::InitAsDefaultInstance() {
}

GameServerList_GameServer::GameServerList_GameServer(const GameServerList_GameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GateServer.GameServerList.GameServer)
}

void GameServerList_GameServer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerList_GameServer::~GameServerList_GameServer() {
  // @@protoc_insertion_point(destructor:GateServer.GameServerList.GameServer)
  SharedDtor();
}

void GameServerList_GameServer::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GameServerList_GameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerList_GameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerList_GameServer_descriptor_;
}

const GameServerList_GameServer& GameServerList_GameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateServer_2eproto();
  return *default_instance_;
}

GameServerList_GameServer* GameServerList_GameServer::default_instance_ = NULL;

GameServerList_GameServer* GameServerList_GameServer::New() const {
  return new GameServerList_GameServer;
}

void GameServerList_GameServer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  games_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerList_GameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateServer.GameServerList.GameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_games;
        break;
      }

      // repeated .GateServer.GameServerList.GameServer.Game games = 3;
      case 3: {
        if (tag == 26) {
         parse_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_games;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateServer.GameServerList.GameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateServer.GameServerList.GameServer)
  return false;
#undef DO_
}

void GameServerList_GameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateServer.GameServerList.GameServer)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // repeated .GateServer.GameServerList.GameServer.Game games = 3;
  for (int i = 0; i < this->games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->games(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateServer.GameServerList.GameServer)
}

::google::protobuf::uint8* GameServerList_GameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateServer.GameServerList.GameServer)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // repeated .GateServer.GameServerList.GameServer.Game games = 3;
  for (int i = 0; i < this->games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->games(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateServer.GameServerList.GameServer)
  return target;
}

int GameServerList_GameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  // repeated .GateServer.GameServerList.GameServer.Game games = 3;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerList_GameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerList_GameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerList_GameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerList_GameServer::MergeFrom(const GameServerList_GameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  games_.MergeFrom(from.games_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerList_GameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerList_GameServer::CopyFrom(const GameServerList_GameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerList_GameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->games())) return false;
  return true;
}

void GameServerList_GameServer::Swap(GameServerList_GameServer* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    games_.Swap(&other->games_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerList_GameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerList_GameServer_descriptor_;
  metadata.reflection = GameServerList_GameServer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameServerList::kServersFieldNumber;
#endif  // !_MSC_VER

GameServerList::GameServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateServer.GameServerList)
}

void GameServerList::InitAsDefaultInstance() {
}

GameServerList::GameServerList(const GameServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GateServer.GameServerList)
}

void GameServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerList::~GameServerList() {
  // @@protoc_insertion_point(destructor:GateServer.GameServerList)
  SharedDtor();
}

void GameServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerList_descriptor_;
}

const GameServerList& GameServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateServer_2eproto();
  return *default_instance_;
}

GameServerList* GameServerList::default_instance_ = NULL;

GameServerList* GameServerList::New() const {
  return new GameServerList;
}

void GameServerList::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateServer.GameServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GateServer.GameServerList.GameServer servers = 1;
      case 1: {
        if (tag == 10) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateServer.GameServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateServer.GameServerList)
  return false;
#undef DO_
}

void GameServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateServer.GameServerList)
  // repeated .GateServer.GameServerList.GameServer servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateServer.GameServerList)
}

::google::protobuf::uint8* GameServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateServer.GameServerList)
  // repeated .GateServer.GameServerList.GameServer servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateServer.GameServerList)
  return target;
}

int GameServerList::ByteSize() const {
  int total_size = 0;

  // repeated .GateServer.GameServerList.GameServer servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerList::MergeFrom(const GameServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerList::CopyFrom(const GameServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void GameServerList::Swap(GameServerList* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerList_descriptor_;
  metadata.reflection = GameServerList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GateServer

// @@protoc_insertion_point(global_scope)
