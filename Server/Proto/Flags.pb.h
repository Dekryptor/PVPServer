// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Flags.proto

#ifndef PROTOBUF_Flags_2eproto__INCLUDED
#define PROTOBUF_Flags_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace FlagsCode {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Flags_2eproto();
void protobuf_AssignDesc_Flags_2eproto();
void protobuf_ShutdownFile_Flags_2eproto();


enum Code {
  PLAYER_FLAGS_NONE = 0,
  PLAYER_FLAGS_LOGIN = 1,
  PLAYER_FLAGS_WAITING = 2,
  PLAYER_FLAGS_READY = 4,
  PLAYER_FLAGS_GAMING = 8,
  PLAYER_FLAGS_DEAD = 65536,
  PLAYER_FLAGS_RESPAWN = 131072
};
bool Code_IsValid(int value);
const Code Code_MIN = PLAYER_FLAGS_NONE;
const Code Code_MAX = PLAYER_FLAGS_RESPAWN;
const int Code_ARRAYSIZE = Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Code_descriptor();
inline const ::std::string& Code_Name(Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Code_descriptor(), value);
}
inline bool Code_Parse(
    const ::std::string& name, Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Code>(
    Code_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace FlagsCode

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FlagsCode::Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FlagsCode::Code>() {
  return ::FlagsCode::Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Flags_2eproto__INCLUDED
