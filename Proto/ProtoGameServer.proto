option optimize_for = SPEED;
package GameServer;

enum VERSION_NUMBER
{
	VERSION = 0x00010000;
}

enum FLAGS_CODE
{
	PLAYER_FLAGS_NONE = 0x00000000;
	PLAYER_FLAGS_LOGIN = 0x00000001;
	PLAYER_FLAGS_WAITING = 0x00000002;
	PLAYER_FLAGS_READY = 0x00000004;
	PLAYER_FLAGS_GAMING = 0x00000008;
}

enum ERROR_CODE
{
	ERR_NONE = 0;

	ERR_VERSION_INVALID = 1;

	ERR_PLAYER_INVALID = 1000;
	ERR_PLAYER_INVALID_ID = 1001;
	ERR_PLAYER_INVALID_GUID = 1002;
	ERR_PLAYER_FLAGS_NOT_NONE = 1003;
	ERR_PLAYER_FLAGS_NOT_LOGIN = 1004;
	ERR_PLAYER_FLAGS_NOT_INGAME = 1005;
	ERR_PLAYER_FLAGS_INGAME = 1006;

	ERR_GAME_INVALID = 2000;
	ERR_GAME_INVALID_ID = 2001;
	ERR_GAME_USING = 2002;
	ERR_GAME_EMPTY = 2003;
	ERR_GAME_FULL = 2004;
	ERR_GAME_PASSWORD = 2005;

	ERR_SERVER_FULL = 3000;

	ERR_GAMEPLAY_INVALID_MODE = 4000;
}

enum RESPONSE_MSG
{
	HEART = 0;
	FLAGS = 1;
	LOGIN = 2;
	HOST = 3;
	CREATE_GAME = 4;
	DESTROY_GAME = 5;
	ENTER_GAME = 6;
	EXIT_GAME = 7;
	SEND_TO_PLAYER = 8;
}

message Heart
{
	required int32 timestamp = 1;
}

message Flags
{
	required uint32 flags = 1;
}

message Login
{
	required ERROR_CODE err = 1;
	optional uint32 guid = 2;
}

message Host
{
	required uint32 guid = 1;
}

message CreateGame
{
	required ERROR_CODE err = 1;
	optional uint32 gameid = 2;
}

message DestroyGame
{
	required ERROR_CODE err = 1;
}

message EnterGame
{
	required ERROR_CODE err = 1;
	optional uint32 guid = 2;
	optional uint32 gameid = 3;
}

message ExitGame
{
	required ERROR_CODE err = 1;
	optional uint32 guid = 2;
}

message SendToPlayer
{
	required int32 size = 1;
	required bytes data = 2;
}