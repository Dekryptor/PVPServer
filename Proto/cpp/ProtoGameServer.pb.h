// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoGameServer.proto

#ifndef PROTOBUF_ProtoGameServer_2eproto__INCLUDED
#define PROTOBUF_ProtoGameServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoGameServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoGameServer_2eproto();
void protobuf_AssignDesc_ProtoGameServer_2eproto();
void protobuf_ShutdownFile_ProtoGameServer_2eproto();

class Heart;
class Flags;
class Login;
class ListGame;
class ListGame_Game;
class CreateGame;
class DestroyGame;
class EnterGame;
class ExitGame;
class SendToPlayer;
class ServerStatus;
class ServerStatus_Game;

enum VERSION_NUMBER {
  VERSION = 65536
};
bool VERSION_NUMBER_IsValid(int value);
const VERSION_NUMBER VERSION_NUMBER_MIN = VERSION;
const VERSION_NUMBER VERSION_NUMBER_MAX = VERSION;
const int VERSION_NUMBER_ARRAYSIZE = VERSION_NUMBER_MAX + 1;

const ::google::protobuf::EnumDescriptor* VERSION_NUMBER_descriptor();
inline const ::std::string& VERSION_NUMBER_Name(VERSION_NUMBER value) {
  return ::google::protobuf::internal::NameOfEnum(
    VERSION_NUMBER_descriptor(), value);
}
inline bool VERSION_NUMBER_Parse(
    const ::std::string& name, VERSION_NUMBER* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VERSION_NUMBER>(
    VERSION_NUMBER_descriptor(), name, value);
}
enum FLAGS_CODE {
  PLAYER_FLAGS_NONE = 0,
  PLAYER_FLAGS_LOGIN = 1,
  PLAYER_FLAGS_WAITING = 2,
  PLAYER_FLAGS_READY = 4,
  PLAYER_FLAGS_GAMING = 8
};
bool FLAGS_CODE_IsValid(int value);
const FLAGS_CODE FLAGS_CODE_MIN = PLAYER_FLAGS_NONE;
const FLAGS_CODE FLAGS_CODE_MAX = PLAYER_FLAGS_GAMING;
const int FLAGS_CODE_ARRAYSIZE = FLAGS_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FLAGS_CODE_descriptor();
inline const ::std::string& FLAGS_CODE_Name(FLAGS_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FLAGS_CODE_descriptor(), value);
}
inline bool FLAGS_CODE_Parse(
    const ::std::string& name, FLAGS_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FLAGS_CODE>(
    FLAGS_CODE_descriptor(), name, value);
}
enum ERROR_CODE {
  ERR_NONE = 0,
  ERR_VERSION_INVALID = 1,
  ERR_PLAYER_INVALID = 1000,
  ERR_PLAYER_INVALID_GUID = 1001,
  ERR_PLAYER_FLAGS_NOT_NONE = 1002,
  ERR_PLAYER_FLAGS_NOT_LOGIN = 1003,
  ERR_PLAYER_FLAGS_NOT_INGAME = 1004,
  ERR_PLAYER_FLAGS_INGAME = 1005,
  ERR_GAME_INVALID = 2000,
  ERR_GAME_INVALID_ID = 2001,
  ERR_GAME_USING = 2002,
  ERR_GAME_EMPTY = 2003,
  ERR_GAME_FULL = 2004,
  ERR_GAME_PASSWORD = 2005,
  ERR_SERVER_FULL = 3000,
  ERR_GAMEPLAY_INVALID_MODE = 4000
};
bool ERROR_CODE_IsValid(int value);
const ERROR_CODE ERROR_CODE_MIN = ERR_NONE;
const ERROR_CODE ERROR_CODE_MAX = ERR_GAMEPLAY_INVALID_MODE;
const int ERROR_CODE_ARRAYSIZE = ERROR_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERROR_CODE_descriptor();
inline const ::std::string& ERROR_CODE_Name(ERROR_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERROR_CODE_descriptor(), value);
}
inline bool ERROR_CODE_Parse(
    const ::std::string& name, ERROR_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERROR_CODE>(
    ERROR_CODE_descriptor(), name, value);
}
enum RESPONSE_MSG {
  HEART = 1000,
  FLAGS = 1001,
  LOGIN = 1002,
  LIST_GAME = 1003,
  CREATE_GAME = 1004,
  DESTROY_GAME = 1005,
  ENTER_GAME = 1006,
  EXIT_GAME = 1007,
  SEND_TO_PLAYER = 1008
};
bool RESPONSE_MSG_IsValid(int value);
const RESPONSE_MSG RESPONSE_MSG_MIN = HEART;
const RESPONSE_MSG RESPONSE_MSG_MAX = SEND_TO_PLAYER;
const int RESPONSE_MSG_ARRAYSIZE = RESPONSE_MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESPONSE_MSG_descriptor();
inline const ::std::string& RESPONSE_MSG_Name(RESPONSE_MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESPONSE_MSG_descriptor(), value);
}
inline bool RESPONSE_MSG_Parse(
    const ::std::string& name, RESPONSE_MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESPONSE_MSG>(
    RESPONSE_MSG_descriptor(), name, value);
}
enum REQUEST_MSG {
  SERVER_STATUS = 2000
};
bool REQUEST_MSG_IsValid(int value);
const REQUEST_MSG REQUEST_MSG_MIN = SERVER_STATUS;
const REQUEST_MSG REQUEST_MSG_MAX = SERVER_STATUS;
const int REQUEST_MSG_ARRAYSIZE = REQUEST_MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_MSG_descriptor();
inline const ::std::string& REQUEST_MSG_Name(REQUEST_MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_MSG_descriptor(), value);
}
inline bool REQUEST_MSG_Parse(
    const ::std::string& name, REQUEST_MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_MSG>(
    REQUEST_MSG_descriptor(), name, value);
}
// ===================================================================

class Heart : public ::google::protobuf::Message {
 public:
  Heart();
  virtual ~Heart();

  Heart(const Heart& from);

  inline Heart& operator=(const Heart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Heart& default_instance();

  void Swap(Heart* other);

  // implements Message ----------------------------------------------

  Heart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Heart& from);
  void MergeFrom(const Heart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.Heart)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 timestamp_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static Heart* default_instance_;
};
// -------------------------------------------------------------------

class Flags : public ::google::protobuf::Message {
 public:
  Flags();
  virtual ~Flags();

  Flags(const Flags& from);

  inline Flags& operator=(const Flags& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Flags& default_instance();

  void Swap(Flags* other);

  // implements Message ----------------------------------------------

  Flags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Flags& from);
  void MergeFrom(const Flags& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 flags = 1;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 1;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.Flags)
 private:
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 flags_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static Flags* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoGameServer.ERROR_CODE err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::ProtoGameServer::ERROR_CODE err() const;
  inline void set_err(::ProtoGameServer::ERROR_CODE value);

  // optional uint32 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint32 guid() const;
  inline void set_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.Login)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int err_;
  ::google::protobuf::uint32 guid_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class ListGame_Game : public ::google::protobuf::Message {
 public:
  ListGame_Game();
  virtual ~ListGame_Game();

  ListGame_Game(const ListGame_Game& from);

  inline ListGame_Game& operator=(const ListGame_Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListGame_Game& default_instance();

  void Swap(ListGame_Game* other);

  // implements Message ----------------------------------------------

  ListGame_Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListGame_Game& from);
  void MergeFrom(const ListGame_Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool private = 1;
  inline bool has_private_() const;
  inline void clear_private_();
  static const int kPrivateFieldNumber = 1;
  inline bool private_() const;
  inline void set_private_(bool value);

  // required int32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // required int32 mapid = 4;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 4;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // required int32 curPlayers = 5;
  inline bool has_curplayers() const;
  inline void clear_curplayers();
  static const int kCurPlayersFieldNumber = 5;
  inline ::google::protobuf::int32 curplayers() const;
  inline void set_curplayers(::google::protobuf::int32 value);

  // required int32 maxPlayers = 6;
  inline bool has_maxplayers() const;
  inline void clear_maxplayers();
  static const int kMaxPlayersFieldNumber = 6;
  inline ::google::protobuf::int32 maxplayers() const;
  inline void set_maxplayers(::google::protobuf::int32 value);

  // required int32 evaluation = 7;
  inline bool has_evaluation() const;
  inline void clear_evaluation();
  static const int kEvaluationFieldNumber = 7;
  inline ::google::protobuf::int32 evaluation() const;
  inline void set_evaluation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.ListGame.Game)
 private:
  inline void set_has_private_();
  inline void clear_has_private_();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_curplayers();
  inline void clear_has_curplayers();
  inline void set_has_maxplayers();
  inline void clear_has_maxplayers();
  inline void set_has_evaluation();
  inline void clear_has_evaluation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool private__;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 curplayers_;
  ::google::protobuf::int32 maxplayers_;
  ::google::protobuf::int32 evaluation_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static ListGame_Game* default_instance_;
};
// -------------------------------------------------------------------

class ListGame : public ::google::protobuf::Message {
 public:
  ListGame();
  virtual ~ListGame();

  ListGame(const ListGame& from);

  inline ListGame& operator=(const ListGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListGame& default_instance();

  void Swap(ListGame* other);

  // implements Message ----------------------------------------------

  ListGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListGame& from);
  void MergeFrom(const ListGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ListGame_Game Game;

  // accessors -------------------------------------------------------

  // required .ProtoGameServer.ERROR_CODE err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::ProtoGameServer::ERROR_CODE err() const;
  inline void set_err(::ProtoGameServer::ERROR_CODE value);

  // optional .ProtoGameServer.ListGame.Game games = 2;
  inline bool has_games() const;
  inline void clear_games();
  static const int kGamesFieldNumber = 2;
  inline const ::ProtoGameServer::ListGame_Game& games() const;
  inline ::ProtoGameServer::ListGame_Game* mutable_games();
  inline ::ProtoGameServer::ListGame_Game* release_games();
  inline void set_allocated_games(::ProtoGameServer::ListGame_Game* games);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.ListGame)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_games();
  inline void clear_has_games();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoGameServer::ListGame_Game* games_;
  int err_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static ListGame* default_instance_;
};
// -------------------------------------------------------------------

class CreateGame : public ::google::protobuf::Message {
 public:
  CreateGame();
  virtual ~CreateGame();

  CreateGame(const CreateGame& from);

  inline CreateGame& operator=(const CreateGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGame& default_instance();

  void Swap(CreateGame* other);

  // implements Message ----------------------------------------------

  CreateGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGame& from);
  void MergeFrom(const CreateGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoGameServer.ERROR_CODE err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::ProtoGameServer::ERROR_CODE err() const;
  inline void set_err(::ProtoGameServer::ERROR_CODE value);

  // optional uint32 host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline ::google::protobuf::uint32 host() const;
  inline void set_host(::google::protobuf::uint32 value);

  // optional uint32 gameid = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 3;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.CreateGame)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int err_;
  ::google::protobuf::uint32 host_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static CreateGame* default_instance_;
};
// -------------------------------------------------------------------

class DestroyGame : public ::google::protobuf::Message {
 public:
  DestroyGame();
  virtual ~DestroyGame();

  DestroyGame(const DestroyGame& from);

  inline DestroyGame& operator=(const DestroyGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyGame& default_instance();

  void Swap(DestroyGame* other);

  // implements Message ----------------------------------------------

  DestroyGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DestroyGame& from);
  void MergeFrom(const DestroyGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoGameServer.ERROR_CODE err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::ProtoGameServer::ERROR_CODE err() const;
  inline void set_err(::ProtoGameServer::ERROR_CODE value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.DestroyGame)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int err_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static DestroyGame* default_instance_;
};
// -------------------------------------------------------------------

class EnterGame : public ::google::protobuf::Message {
 public:
  EnterGame();
  virtual ~EnterGame();

  EnterGame(const EnterGame& from);

  inline EnterGame& operator=(const EnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGame& default_instance();

  void Swap(EnterGame* other);

  // implements Message ----------------------------------------------

  EnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterGame& from);
  void MergeFrom(const EnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoGameServer.ERROR_CODE err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::ProtoGameServer::ERROR_CODE err() const;
  inline void set_err(::ProtoGameServer::ERROR_CODE value);

  // optional uint32 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint32 guid() const;
  inline void set_guid(::google::protobuf::uint32 value);

  // optional uint32 host = 3;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 3;
  inline ::google::protobuf::uint32 host() const;
  inline void set_host(::google::protobuf::uint32 value);

  // optional uint32 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.EnterGame)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int err_;
  ::google::protobuf::uint32 guid_;
  ::google::protobuf::uint32 host_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static EnterGame* default_instance_;
};
// -------------------------------------------------------------------

class ExitGame : public ::google::protobuf::Message {
 public:
  ExitGame();
  virtual ~ExitGame();

  ExitGame(const ExitGame& from);

  inline ExitGame& operator=(const ExitGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitGame& default_instance();

  void Swap(ExitGame* other);

  // implements Message ----------------------------------------------

  ExitGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitGame& from);
  void MergeFrom(const ExitGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoGameServer.ERROR_CODE err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::ProtoGameServer::ERROR_CODE err() const;
  inline void set_err(::ProtoGameServer::ERROR_CODE value);

  // optional uint32 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint32 guid() const;
  inline void set_guid(::google::protobuf::uint32 value);

  // optional uint32 host = 3;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 3;
  inline ::google::protobuf::uint32 host() const;
  inline void set_host(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.ExitGame)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int err_;
  ::google::protobuf::uint32 guid_;
  ::google::protobuf::uint32 host_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static ExitGame* default_instance_;
};
// -------------------------------------------------------------------

class SendToPlayer : public ::google::protobuf::Message {
 public:
  SendToPlayer();
  virtual ~SendToPlayer();

  SendToPlayer(const SendToPlayer& from);

  inline SendToPlayer& operator=(const SendToPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToPlayer& default_instance();

  void Swap(SendToPlayer* other);

  // implements Message ----------------------------------------------

  SendToPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendToPlayer& from);
  void MergeFrom(const SendToPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.SendToPlayer)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static SendToPlayer* default_instance_;
};
// -------------------------------------------------------------------

class ServerStatus_Game : public ::google::protobuf::Message {
 public:
  ServerStatus_Game();
  virtual ~ServerStatus_Game();

  ServerStatus_Game(const ServerStatus_Game& from);

  inline ServerStatus_Game& operator=(const ServerStatus_Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStatus_Game& default_instance();

  void Swap(ServerStatus_Game* other);

  // implements Message ----------------------------------------------

  ServerStatus_Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerStatus_Game& from);
  void MergeFrom(const ServerStatus_Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool empty = 1;
  inline bool has_empty() const;
  inline void clear_empty();
  static const int kEmptyFieldNumber = 1;
  inline bool empty() const;
  inline void set_empty(bool value);

  // required int32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // required int32 mapid = 4;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 4;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // required int32 evaluation = 5;
  inline bool has_evaluation() const;
  inline void clear_evaluation();
  static const int kEvaluationFieldNumber = 5;
  inline ::google::protobuf::int32 evaluation() const;
  inline void set_evaluation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoGameServer.ServerStatus.Game)
 private:
  inline void set_has_empty();
  inline void clear_has_empty();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_evaluation();
  inline void clear_has_evaluation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool empty_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 evaluation_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static ServerStatus_Game* default_instance_;
};
// -------------------------------------------------------------------

class ServerStatus : public ::google::protobuf::Message {
 public:
  ServerStatus();
  virtual ~ServerStatus();

  ServerStatus(const ServerStatus& from);

  inline ServerStatus& operator=(const ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStatus& default_instance();

  void Swap(ServerStatus* other);

  // implements Message ----------------------------------------------

  ServerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerStatus& from);
  void MergeFrom(const ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerStatus_Game Game;

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 curGames = 3;
  inline bool has_curgames() const;
  inline void clear_curgames();
  static const int kCurGamesFieldNumber = 3;
  inline ::google::protobuf::int32 curgames() const;
  inline void set_curgames(::google::protobuf::int32 value);

  // required int32 maxGames = 4;
  inline bool has_maxgames() const;
  inline void clear_maxgames();
  static const int kMaxGamesFieldNumber = 4;
  inline ::google::protobuf::int32 maxgames() const;
  inline void set_maxgames(::google::protobuf::int32 value);

  // repeated .ProtoGameServer.ServerStatus.Game games = 5;
  inline int games_size() const;
  inline void clear_games();
  static const int kGamesFieldNumber = 5;
  inline const ::ProtoGameServer::ServerStatus_Game& games(int index) const;
  inline ::ProtoGameServer::ServerStatus_Game* mutable_games(int index);
  inline ::ProtoGameServer::ServerStatus_Game* add_games();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoGameServer::ServerStatus_Game >&
      games() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoGameServer::ServerStatus_Game >*
      mutable_games();

  // @@protoc_insertion_point(class_scope:ProtoGameServer.ServerStatus)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_curgames();
  inline void clear_has_curgames();
  inline void set_has_maxgames();
  inline void clear_has_maxgames();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 curgames_;
  ::google::protobuf::RepeatedPtrField< ::ProtoGameServer::ServerStatus_Game > games_;
  ::google::protobuf::int32 maxgames_;
  friend void  protobuf_AddDesc_ProtoGameServer_2eproto();
  friend void protobuf_AssignDesc_ProtoGameServer_2eproto();
  friend void protobuf_ShutdownFile_ProtoGameServer_2eproto();

  void InitAsDefaultInstance();
  static ServerStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// Heart

// required int32 timestamp = 1;
inline bool Heart::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Heart::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Heart::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Heart::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 Heart::timestamp() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.Heart.timestamp)
  return timestamp_;
}
inline void Heart::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.Heart.timestamp)
}

// -------------------------------------------------------------------

// Flags

// required uint32 flags = 1;
inline bool Flags::has_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Flags::set_has_flags() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Flags::clear_has_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Flags::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 Flags::flags() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.Flags.flags)
  return flags_;
}
inline void Flags::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.Flags.flags)
}

// -------------------------------------------------------------------

// Login

// required .ProtoGameServer.ERROR_CODE err = 1;
inline bool Login::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::ProtoGameServer::ERROR_CODE Login::err() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.Login.err)
  return static_cast< ::ProtoGameServer::ERROR_CODE >(err_);
}
inline void Login::set_err(::ProtoGameServer::ERROR_CODE value) {
  assert(::ProtoGameServer::ERROR_CODE_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.Login.err)
}

// optional uint32 guid = 2;
inline bool Login::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_guid() {
  guid_ = 0u;
  clear_has_guid();
}
inline ::google::protobuf::uint32 Login::guid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.Login.guid)
  return guid_;
}
inline void Login::set_guid(::google::protobuf::uint32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.Login.guid)
}

// -------------------------------------------------------------------

// ListGame_Game

// required bool private = 1;
inline bool ListGame_Game::has_private_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListGame_Game::set_has_private_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListGame_Game::clear_has_private_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListGame_Game::clear_private_() {
  private__ = false;
  clear_has_private_();
}
inline bool ListGame_Game::private_() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.Game.private)
  return private__;
}
inline void ListGame_Game::set_private_(bool value) {
  set_has_private_();
  private__ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.Game.private)
}

// required int32 gameid = 2;
inline bool ListGame_Game::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListGame_Game::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListGame_Game::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListGame_Game::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ListGame_Game::gameid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.Game.gameid)
  return gameid_;
}
inline void ListGame_Game::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.Game.gameid)
}

// required int32 mode = 3;
inline bool ListGame_Game::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListGame_Game::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListGame_Game::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListGame_Game::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 ListGame_Game::mode() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.Game.mode)
  return mode_;
}
inline void ListGame_Game::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.Game.mode)
}

// required int32 mapid = 4;
inline bool ListGame_Game::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListGame_Game::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListGame_Game::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListGame_Game::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 ListGame_Game::mapid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.Game.mapid)
  return mapid_;
}
inline void ListGame_Game::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.Game.mapid)
}

// required int32 curPlayers = 5;
inline bool ListGame_Game::has_curplayers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListGame_Game::set_has_curplayers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListGame_Game::clear_has_curplayers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListGame_Game::clear_curplayers() {
  curplayers_ = 0;
  clear_has_curplayers();
}
inline ::google::protobuf::int32 ListGame_Game::curplayers() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.Game.curPlayers)
  return curplayers_;
}
inline void ListGame_Game::set_curplayers(::google::protobuf::int32 value) {
  set_has_curplayers();
  curplayers_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.Game.curPlayers)
}

// required int32 maxPlayers = 6;
inline bool ListGame_Game::has_maxplayers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ListGame_Game::set_has_maxplayers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ListGame_Game::clear_has_maxplayers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ListGame_Game::clear_maxplayers() {
  maxplayers_ = 0;
  clear_has_maxplayers();
}
inline ::google::protobuf::int32 ListGame_Game::maxplayers() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.Game.maxPlayers)
  return maxplayers_;
}
inline void ListGame_Game::set_maxplayers(::google::protobuf::int32 value) {
  set_has_maxplayers();
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.Game.maxPlayers)
}

// required int32 evaluation = 7;
inline bool ListGame_Game::has_evaluation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ListGame_Game::set_has_evaluation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ListGame_Game::clear_has_evaluation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ListGame_Game::clear_evaluation() {
  evaluation_ = 0;
  clear_has_evaluation();
}
inline ::google::protobuf::int32 ListGame_Game::evaluation() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.Game.evaluation)
  return evaluation_;
}
inline void ListGame_Game::set_evaluation(::google::protobuf::int32 value) {
  set_has_evaluation();
  evaluation_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.Game.evaluation)
}

// -------------------------------------------------------------------

// ListGame

// required .ProtoGameServer.ERROR_CODE err = 1;
inline bool ListGame::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListGame::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListGame::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListGame::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::ProtoGameServer::ERROR_CODE ListGame::err() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.err)
  return static_cast< ::ProtoGameServer::ERROR_CODE >(err_);
}
inline void ListGame::set_err(::ProtoGameServer::ERROR_CODE value) {
  assert(::ProtoGameServer::ERROR_CODE_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ListGame.err)
}

// optional .ProtoGameServer.ListGame.Game games = 2;
inline bool ListGame::has_games() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListGame::set_has_games() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListGame::clear_has_games() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListGame::clear_games() {
  if (games_ != NULL) games_->::ProtoGameServer::ListGame_Game::Clear();
  clear_has_games();
}
inline const ::ProtoGameServer::ListGame_Game& ListGame::games() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ListGame.games)
  return games_ != NULL ? *games_ : *default_instance_->games_;
}
inline ::ProtoGameServer::ListGame_Game* ListGame::mutable_games() {
  set_has_games();
  if (games_ == NULL) games_ = new ::ProtoGameServer::ListGame_Game;
  // @@protoc_insertion_point(field_mutable:ProtoGameServer.ListGame.games)
  return games_;
}
inline ::ProtoGameServer::ListGame_Game* ListGame::release_games() {
  clear_has_games();
  ::ProtoGameServer::ListGame_Game* temp = games_;
  games_ = NULL;
  return temp;
}
inline void ListGame::set_allocated_games(::ProtoGameServer::ListGame_Game* games) {
  delete games_;
  games_ = games;
  if (games) {
    set_has_games();
  } else {
    clear_has_games();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoGameServer.ListGame.games)
}

// -------------------------------------------------------------------

// CreateGame

// required .ProtoGameServer.ERROR_CODE err = 1;
inline bool CreateGame::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateGame::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateGame::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateGame::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::ProtoGameServer::ERROR_CODE CreateGame::err() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.CreateGame.err)
  return static_cast< ::ProtoGameServer::ERROR_CODE >(err_);
}
inline void CreateGame::set_err(::ProtoGameServer::ERROR_CODE value) {
  assert(::ProtoGameServer::ERROR_CODE_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.CreateGame.err)
}

// optional uint32 host = 2;
inline bool CreateGame::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateGame::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateGame::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateGame::clear_host() {
  host_ = 0u;
  clear_has_host();
}
inline ::google::protobuf::uint32 CreateGame::host() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.CreateGame.host)
  return host_;
}
inline void CreateGame::set_host(::google::protobuf::uint32 value) {
  set_has_host();
  host_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.CreateGame.host)
}

// optional uint32 gameid = 3;
inline bool CreateGame::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateGame::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateGame::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateGame::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 CreateGame::gameid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.CreateGame.gameid)
  return gameid_;
}
inline void CreateGame::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.CreateGame.gameid)
}

// -------------------------------------------------------------------

// DestroyGame

// required .ProtoGameServer.ERROR_CODE err = 1;
inline bool DestroyGame::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DestroyGame::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DestroyGame::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DestroyGame::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::ProtoGameServer::ERROR_CODE DestroyGame::err() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.DestroyGame.err)
  return static_cast< ::ProtoGameServer::ERROR_CODE >(err_);
}
inline void DestroyGame::set_err(::ProtoGameServer::ERROR_CODE value) {
  assert(::ProtoGameServer::ERROR_CODE_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.DestroyGame.err)
}

// -------------------------------------------------------------------

// EnterGame

// required .ProtoGameServer.ERROR_CODE err = 1;
inline bool EnterGame::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGame::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGame::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGame::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::ProtoGameServer::ERROR_CODE EnterGame::err() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.EnterGame.err)
  return static_cast< ::ProtoGameServer::ERROR_CODE >(err_);
}
inline void EnterGame::set_err(::ProtoGameServer::ERROR_CODE value) {
  assert(::ProtoGameServer::ERROR_CODE_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.EnterGame.err)
}

// optional uint32 guid = 2;
inline bool EnterGame::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGame::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGame::clear_guid() {
  guid_ = 0u;
  clear_has_guid();
}
inline ::google::protobuf::uint32 EnterGame::guid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.EnterGame.guid)
  return guid_;
}
inline void EnterGame::set_guid(::google::protobuf::uint32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.EnterGame.guid)
}

// optional uint32 host = 3;
inline bool EnterGame::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterGame::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterGame::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterGame::clear_host() {
  host_ = 0u;
  clear_has_host();
}
inline ::google::protobuf::uint32 EnterGame::host() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.EnterGame.host)
  return host_;
}
inline void EnterGame::set_host(::google::protobuf::uint32 value) {
  set_has_host();
  host_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.EnterGame.host)
}

// optional uint32 gameid = 4;
inline bool EnterGame::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterGame::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterGame::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterGame::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 EnterGame::gameid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.EnterGame.gameid)
  return gameid_;
}
inline void EnterGame::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.EnterGame.gameid)
}

// -------------------------------------------------------------------

// ExitGame

// required .ProtoGameServer.ERROR_CODE err = 1;
inline bool ExitGame::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitGame::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitGame::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitGame::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::ProtoGameServer::ERROR_CODE ExitGame::err() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ExitGame.err)
  return static_cast< ::ProtoGameServer::ERROR_CODE >(err_);
}
inline void ExitGame::set_err(::ProtoGameServer::ERROR_CODE value) {
  assert(::ProtoGameServer::ERROR_CODE_IsValid(value));
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ExitGame.err)
}

// optional uint32 guid = 2;
inline bool ExitGame::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitGame::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitGame::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitGame::clear_guid() {
  guid_ = 0u;
  clear_has_guid();
}
inline ::google::protobuf::uint32 ExitGame::guid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ExitGame.guid)
  return guid_;
}
inline void ExitGame::set_guid(::google::protobuf::uint32 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ExitGame.guid)
}

// optional uint32 host = 3;
inline bool ExitGame::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitGame::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitGame::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitGame::clear_host() {
  host_ = 0u;
  clear_has_host();
}
inline ::google::protobuf::uint32 ExitGame::host() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ExitGame.host)
  return host_;
}
inline void ExitGame::set_host(::google::protobuf::uint32 value) {
  set_has_host();
  host_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ExitGame.host)
}

// -------------------------------------------------------------------

// SendToPlayer

// required int32 size = 1;
inline bool SendToPlayer::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendToPlayer::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendToPlayer::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendToPlayer::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 SendToPlayer::size() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.SendToPlayer.size)
  return size_;
}
inline void SendToPlayer::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.SendToPlayer.size)
}

// required bytes data = 2;
inline bool SendToPlayer::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendToPlayer::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendToPlayer::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendToPlayer::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SendToPlayer::data() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.SendToPlayer.data)
  return *data_;
}
inline void SendToPlayer::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoGameServer.SendToPlayer.data)
}
inline void SendToPlayer::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoGameServer.SendToPlayer.data)
}
inline void SendToPlayer::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoGameServer.SendToPlayer.data)
}
inline ::std::string* SendToPlayer::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoGameServer.SendToPlayer.data)
  return data_;
}
inline ::std::string* SendToPlayer::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendToPlayer::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoGameServer.SendToPlayer.data)
}

// -------------------------------------------------------------------

// ServerStatus_Game

// required bool empty = 1;
inline bool ServerStatus_Game::has_empty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerStatus_Game::set_has_empty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerStatus_Game::clear_has_empty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerStatus_Game::clear_empty() {
  empty_ = false;
  clear_has_empty();
}
inline bool ServerStatus_Game::empty() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.Game.empty)
  return empty_;
}
inline void ServerStatus_Game::set_empty(bool value) {
  set_has_empty();
  empty_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.Game.empty)
}

// required int32 gameid = 2;
inline bool ServerStatus_Game::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerStatus_Game::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerStatus_Game::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerStatus_Game::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ServerStatus_Game::gameid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.Game.gameid)
  return gameid_;
}
inline void ServerStatus_Game::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.Game.gameid)
}

// required int32 mode = 3;
inline bool ServerStatus_Game::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerStatus_Game::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerStatus_Game::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerStatus_Game::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 ServerStatus_Game::mode() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.Game.mode)
  return mode_;
}
inline void ServerStatus_Game::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.Game.mode)
}

// required int32 mapid = 4;
inline bool ServerStatus_Game::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerStatus_Game::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerStatus_Game::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerStatus_Game::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 ServerStatus_Game::mapid() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.Game.mapid)
  return mapid_;
}
inline void ServerStatus_Game::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.Game.mapid)
}

// required int32 evaluation = 5;
inline bool ServerStatus_Game::has_evaluation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerStatus_Game::set_has_evaluation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerStatus_Game::clear_has_evaluation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerStatus_Game::clear_evaluation() {
  evaluation_ = 0;
  clear_has_evaluation();
}
inline ::google::protobuf::int32 ServerStatus_Game::evaluation() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.Game.evaluation)
  return evaluation_;
}
inline void ServerStatus_Game::set_evaluation(::google::protobuf::int32 value) {
  set_has_evaluation();
  evaluation_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.Game.evaluation)
}

// -------------------------------------------------------------------

// ServerStatus

// required string ip = 1;
inline bool ServerStatus::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerStatus::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerStatus::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerStatus::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerStatus::ip() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.ip)
  return *ip_;
}
inline void ServerStatus::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.ip)
}
inline void ServerStatus::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoGameServer.ServerStatus.ip)
}
inline void ServerStatus::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoGameServer.ServerStatus.ip)
}
inline ::std::string* ServerStatus::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoGameServer.ServerStatus.ip)
  return ip_;
}
inline ::std::string* ServerStatus::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerStatus::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoGameServer.ServerStatus.ip)
}

// required int32 port = 2;
inline bool ServerStatus::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerStatus::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerStatus::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerStatus::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerStatus::port() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.port)
  return port_;
}
inline void ServerStatus::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.port)
}

// required int32 curGames = 3;
inline bool ServerStatus::has_curgames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerStatus::set_has_curgames() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerStatus::clear_has_curgames() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerStatus::clear_curgames() {
  curgames_ = 0;
  clear_has_curgames();
}
inline ::google::protobuf::int32 ServerStatus::curgames() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.curGames)
  return curgames_;
}
inline void ServerStatus::set_curgames(::google::protobuf::int32 value) {
  set_has_curgames();
  curgames_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.curGames)
}

// required int32 maxGames = 4;
inline bool ServerStatus::has_maxgames() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerStatus::set_has_maxgames() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerStatus::clear_has_maxgames() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerStatus::clear_maxgames() {
  maxgames_ = 0;
  clear_has_maxgames();
}
inline ::google::protobuf::int32 ServerStatus::maxgames() const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.maxGames)
  return maxgames_;
}
inline void ServerStatus::set_maxgames(::google::protobuf::int32 value) {
  set_has_maxgames();
  maxgames_ = value;
  // @@protoc_insertion_point(field_set:ProtoGameServer.ServerStatus.maxGames)
}

// repeated .ProtoGameServer.ServerStatus.Game games = 5;
inline int ServerStatus::games_size() const {
  return games_.size();
}
inline void ServerStatus::clear_games() {
  games_.Clear();
}
inline const ::ProtoGameServer::ServerStatus_Game& ServerStatus::games(int index) const {
  // @@protoc_insertion_point(field_get:ProtoGameServer.ServerStatus.games)
  return games_.Get(index);
}
inline ::ProtoGameServer::ServerStatus_Game* ServerStatus::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoGameServer.ServerStatus.games)
  return games_.Mutable(index);
}
inline ::ProtoGameServer::ServerStatus_Game* ServerStatus::add_games() {
  // @@protoc_insertion_point(field_add:ProtoGameServer.ServerStatus.games)
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoGameServer::ServerStatus_Game >&
ServerStatus::games() const {
  // @@protoc_insertion_point(field_list:ProtoGameServer.ServerStatus.games)
  return games_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoGameServer::ServerStatus_Game >*
ServerStatus::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:ProtoGameServer.ServerStatus.games)
  return &games_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoGameServer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ProtoGameServer::VERSION_NUMBER> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoGameServer::VERSION_NUMBER>() {
  return ::ProtoGameServer::VERSION_NUMBER_descriptor();
}
template <> struct is_proto_enum< ::ProtoGameServer::FLAGS_CODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoGameServer::FLAGS_CODE>() {
  return ::ProtoGameServer::FLAGS_CODE_descriptor();
}
template <> struct is_proto_enum< ::ProtoGameServer::ERROR_CODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoGameServer::ERROR_CODE>() {
  return ::ProtoGameServer::ERROR_CODE_descriptor();
}
template <> struct is_proto_enum< ::ProtoGameServer::RESPONSE_MSG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoGameServer::RESPONSE_MSG>() {
  return ::ProtoGameServer::RESPONSE_MSG_descriptor();
}
template <> struct is_proto_enum< ::ProtoGameServer::REQUEST_MSG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoGameServer::REQUEST_MSG>() {
  return ::ProtoGameServer::REQUEST_MSG_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoGameServer_2eproto__INCLUDED
