// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoGateServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoGateServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoGateServer {

namespace {

const ::google::protobuf::Descriptor* Heart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListGameServer_GameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListGameServer_GameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendToPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendToPlayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VERSION_NUMBER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERROR_CODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESPONSE_MSG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoGateServer_2eproto() {
  protobuf_AddDesc_ProtoGateServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoGateServer.proto");
  GOOGLE_CHECK(file != NULL);
  Heart_descriptor_ = file->message_type(0);
  static const int Heart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, timestamp_),
  };
  Heart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heart_descriptor_,
      Heart::default_instance_,
      Heart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heart));
  Login_descriptor_ = file->message_type(1);
  static const int Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, guid_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  ListGameServer_descriptor_ = file->message_type(2);
  static const int ListGameServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer, servers_),
  };
  ListGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListGameServer_descriptor_,
      ListGameServer::default_instance_,
      ListGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListGameServer));
  ListGameServer_GameServer_descriptor_ = ListGameServer_descriptor_->nested_type(0);
  static const int ListGameServer_GameServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer_GameServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer_GameServer, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer_GameServer, maxgames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer_GameServer, curgames_),
  };
  ListGameServer_GameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListGameServer_GameServer_descriptor_,
      ListGameServer_GameServer::default_instance_,
      ListGameServer_GameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer_GameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListGameServer_GameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListGameServer_GameServer));
  SendToPlayer_descriptor_ = file->message_type(3);
  static const int SendToPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToPlayer, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToPlayer, data_),
  };
  SendToPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendToPlayer_descriptor_,
      SendToPlayer::default_instance_,
      SendToPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendToPlayer));
  VERSION_NUMBER_descriptor_ = file->enum_type(0);
  ERROR_CODE_descriptor_ = file->enum_type(1);
  RESPONSE_MSG_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoGateServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heart_descriptor_, &Heart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListGameServer_descriptor_, &ListGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListGameServer_GameServer_descriptor_, &ListGameServer_GameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendToPlayer_descriptor_, &SendToPlayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoGateServer_2eproto() {
  delete Heart::default_instance_;
  delete Heart_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete ListGameServer::default_instance_;
  delete ListGameServer_reflection_;
  delete ListGameServer_GameServer::default_instance_;
  delete ListGameServer_GameServer_reflection_;
  delete SendToPlayer::default_instance_;
  delete SendToPlayer_reflection_;
}

void protobuf_AddDesc_ProtoGateServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ProtoGateServer.proto\022\017ProtoGateServer"
    "\"\032\n\005Heart\022\021\n\ttimestamp\030\001 \002(\005\"\?\n\005Login\022(\n"
    "\003err\030\001 \002(\0162\033.ProtoGateServer.ERROR_CODE\022"
    "\014\n\004guid\030\002 \001(\r\"\303\001\n\016ListGameServer\022(\n\003err\030"
    "\001 \002(\0162\033.ProtoGateServer.ERROR_CODE\022;\n\007se"
    "rvers\030\002 \003(\0132*.ProtoGateServer.ListGameSe"
    "rver.GameServer\032J\n\nGameServer\022\n\n\002ip\030\001 \002("
    "\t\022\014\n\004port\030\002 \002(\005\022\020\n\010maxGames\030\003 \002(\005\022\020\n\010cur"
    "Games\030\004 \002(\005\"*\n\014SendToPlayer\022\014\n\004size\030\001 \002("
    "\005\022\014\n\004data\030\002 \002(\014*\037\n\016VERSION_NUMBER\022\r\n\007VER"
    "SION\020\200\200\004*\237\001\n\nERROR_CODE\022\014\n\010ERR_NONE\020\000\022\027\n"
    "\023ERR_VERSION_INVALID\020\001\022\027\n\022ERR_PLAYER_INV"
    "ALID\020\350\007\022\034\n\027ERR_PLAYER_INVALID_GUID\020\351\007\022\030\n"
    "\023ERR_PLAYER_NOT_NONE\020\352\007\022\031\n\024ERR_PLAYER_NO"
    "T_LOGIN\020\353\007*R\n\014RESPONSE_MSG\022\n\n\005HEART\020\270\027\022\n"
    "\n\005LOGIN\020\271\027\022\025\n\020LIST_GAME_SERVER\020\272\027\022\023\n\016SEN"
    "D_TO_PLAYER\020\273\027B\002H\001", 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoGateServer.proto", &protobuf_RegisterTypes);
  Heart::default_instance_ = new Heart();
  Login::default_instance_ = new Login();
  ListGameServer::default_instance_ = new ListGameServer();
  ListGameServer_GameServer::default_instance_ = new ListGameServer_GameServer();
  SendToPlayer::default_instance_ = new SendToPlayer();
  Heart::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  ListGameServer::default_instance_->InitAsDefaultInstance();
  ListGameServer_GameServer::default_instance_->InitAsDefaultInstance();
  SendToPlayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoGateServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoGateServer_2eproto {
  StaticDescriptorInitializer_ProtoGateServer_2eproto() {
    protobuf_AddDesc_ProtoGateServer_2eproto();
  }
} static_descriptor_initializer_ProtoGateServer_2eproto_;
const ::google::protobuf::EnumDescriptor* VERSION_NUMBER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VERSION_NUMBER_descriptor_;
}
bool VERSION_NUMBER_IsValid(int value) {
  switch(value) {
    case 65536:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERROR_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERROR_CODE_descriptor_;
}
bool ERROR_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESPONSE_MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESPONSE_MSG_descriptor_;
}
bool RESPONSE_MSG_IsValid(int value) {
  switch(value) {
    case 3000:
    case 3001:
    case 3002:
    case 3003:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Heart::kTimestampFieldNumber;
#endif  // !_MSC_VER

Heart::Heart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGateServer.Heart)
}

void Heart::InitAsDefaultInstance() {
}

Heart::Heart(const Heart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGateServer.Heart)
}

void Heart::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heart::~Heart() {
  // @@protoc_insertion_point(destructor:ProtoGateServer.Heart)
  SharedDtor();
}

void Heart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heart_descriptor_;
}

const Heart& Heart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGateServer_2eproto();
  return *default_instance_;
}

Heart* Heart::default_instance_ = NULL;

Heart* Heart::New() const {
  return new Heart;
}

void Heart::Clear() {
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGateServer.Heart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGateServer.Heart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGateServer.Heart)
  return false;
#undef DO_
}

void Heart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGateServer.Heart)
  // required int32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGateServer.Heart)
}

::google::protobuf::uint8* Heart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGateServer.Heart)
  // required int32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGateServer.Heart)
  return target;
}

int Heart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heart::MergeFrom(const Heart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heart::CopyFrom(const Heart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Heart::Swap(Heart* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heart_descriptor_;
  metadata.reflection = Heart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kErrFieldNumber;
const int Login::kGuidFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGateServer.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGateServer.Login)
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  guid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:ProtoGateServer.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGateServer_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Login*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(err_, guid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGateServer.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoGateServer.ERROR_CODE err = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoGateServer::ERROR_CODE_IsValid(value)) {
            set_err(static_cast< ::ProtoGateServer::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint32 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGateServer.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGateServer.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGateServer.Login)
  // required .ProtoGateServer.ERROR_CODE err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err(), output);
  }

  // optional uint32 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGateServer.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGateServer.Login)
  // required .ProtoGateServer.ERROR_CODE err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err(), target);
  }

  // optional uint32 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGateServer.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoGateServer.ERROR_CODE err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
    }

    // optional uint32 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListGameServer_GameServer::kIpFieldNumber;
const int ListGameServer_GameServer::kPortFieldNumber;
const int ListGameServer_GameServer::kMaxGamesFieldNumber;
const int ListGameServer_GameServer::kCurGamesFieldNumber;
#endif  // !_MSC_VER

ListGameServer_GameServer::ListGameServer_GameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGateServer.ListGameServer.GameServer)
}

void ListGameServer_GameServer::InitAsDefaultInstance() {
}

ListGameServer_GameServer::ListGameServer_GameServer(const ListGameServer_GameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGateServer.ListGameServer.GameServer)
}

void ListGameServer_GameServer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  maxgames_ = 0;
  curgames_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListGameServer_GameServer::~ListGameServer_GameServer() {
  // @@protoc_insertion_point(destructor:ProtoGateServer.ListGameServer.GameServer)
  SharedDtor();
}

void ListGameServer_GameServer::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ListGameServer_GameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListGameServer_GameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListGameServer_GameServer_descriptor_;
}

const ListGameServer_GameServer& ListGameServer_GameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGateServer_2eproto();
  return *default_instance_;
}

ListGameServer_GameServer* ListGameServer_GameServer::default_instance_ = NULL;

ListGameServer_GameServer* ListGameServer_GameServer::New() const {
  return new ListGameServer_GameServer;
}

void ListGameServer_GameServer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ListGameServer_GameServer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(port_, curgames_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListGameServer_GameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGateServer.ListGameServer.GameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxGames;
        break;
      }

      // required int32 maxGames = 3;
      case 3: {
        if (tag == 24) {
         parse_maxGames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxgames_)));
          set_has_maxgames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curGames;
        break;
      }

      // required int32 curGames = 4;
      case 4: {
        if (tag == 32) {
         parse_curGames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curgames_)));
          set_has_curgames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGateServer.ListGameServer.GameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGateServer.ListGameServer.GameServer)
  return false;
#undef DO_
}

void ListGameServer_GameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGateServer.ListGameServer.GameServer)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required int32 maxGames = 3;
  if (has_maxgames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxgames(), output);
  }

  // required int32 curGames = 4;
  if (has_curgames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curgames(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGateServer.ListGameServer.GameServer)
}

::google::protobuf::uint8* ListGameServer_GameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGateServer.ListGameServer.GameServer)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required int32 maxGames = 3;
  if (has_maxgames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxgames(), target);
  }

  // required int32 curGames = 4;
  if (has_curgames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curgames(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGateServer.ListGameServer.GameServer)
  return target;
}

int ListGameServer_GameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 maxGames = 3;
    if (has_maxgames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxgames());
    }

    // required int32 curGames = 4;
    if (has_curgames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curgames());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListGameServer_GameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListGameServer_GameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListGameServer_GameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListGameServer_GameServer::MergeFrom(const ListGameServer_GameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_maxgames()) {
      set_maxgames(from.maxgames());
    }
    if (from.has_curgames()) {
      set_curgames(from.curgames());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListGameServer_GameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGameServer_GameServer::CopyFrom(const ListGameServer_GameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGameServer_GameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ListGameServer_GameServer::Swap(ListGameServer_GameServer* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(maxgames_, other->maxgames_);
    std::swap(curgames_, other->curgames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListGameServer_GameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListGameServer_GameServer_descriptor_;
  metadata.reflection = ListGameServer_GameServer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ListGameServer::kErrFieldNumber;
const int ListGameServer::kServersFieldNumber;
#endif  // !_MSC_VER

ListGameServer::ListGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGateServer.ListGameServer)
}

void ListGameServer::InitAsDefaultInstance() {
}

ListGameServer::ListGameServer(const ListGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGateServer.ListGameServer)
}

void ListGameServer::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListGameServer::~ListGameServer() {
  // @@protoc_insertion_point(destructor:ProtoGateServer.ListGameServer)
  SharedDtor();
}

void ListGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListGameServer_descriptor_;
}

const ListGameServer& ListGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGateServer_2eproto();
  return *default_instance_;
}

ListGameServer* ListGameServer::default_instance_ = NULL;

ListGameServer* ListGameServer::New() const {
  return new ListGameServer;
}

void ListGameServer::Clear() {
  err_ = 0;
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGateServer.ListGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoGateServer.ERROR_CODE err = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoGateServer::ERROR_CODE_IsValid(value)) {
            set_err(static_cast< ::ProtoGateServer::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        break;
      }

      // repeated .ProtoGateServer.ListGameServer.GameServer servers = 2;
      case 2: {
        if (tag == 18) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGateServer.ListGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGateServer.ListGameServer)
  return false;
#undef DO_
}

void ListGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGateServer.ListGameServer)
  // required .ProtoGateServer.ERROR_CODE err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err(), output);
  }

  // repeated .ProtoGateServer.ListGameServer.GameServer servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGateServer.ListGameServer)
}

::google::protobuf::uint8* ListGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGateServer.ListGameServer)
  // required .ProtoGateServer.ERROR_CODE err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err(), target);
  }

  // repeated .ProtoGateServer.ListGameServer.GameServer servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGateServer.ListGameServer)
  return target;
}

int ListGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoGateServer.ERROR_CODE err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err());
    }

  }
  // repeated .ProtoGateServer.ListGameServer.GameServer servers = 2;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListGameServer::MergeFrom(const ListGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGameServer::CopyFrom(const ListGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void ListGameServer::Swap(ListGameServer* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListGameServer_descriptor_;
  metadata.reflection = ListGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendToPlayer::kSizeFieldNumber;
const int SendToPlayer::kDataFieldNumber;
#endif  // !_MSC_VER

SendToPlayer::SendToPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGateServer.SendToPlayer)
}

void SendToPlayer::InitAsDefaultInstance() {
}

SendToPlayer::SendToPlayer(const SendToPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGateServer.SendToPlayer)
}

void SendToPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendToPlayer::~SendToPlayer() {
  // @@protoc_insertion_point(destructor:ProtoGateServer.SendToPlayer)
  SharedDtor();
}

void SendToPlayer::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SendToPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendToPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendToPlayer_descriptor_;
}

const SendToPlayer& SendToPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGateServer_2eproto();
  return *default_instance_;
}

SendToPlayer* SendToPlayer::default_instance_ = NULL;

SendToPlayer* SendToPlayer::New() const {
  return new SendToPlayer;
}

void SendToPlayer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    size_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendToPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGateServer.SendToPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGateServer.SendToPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGateServer.SendToPlayer)
  return false;
#undef DO_
}

void SendToPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGateServer.SendToPlayer)
  // required int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGateServer.SendToPlayer)
}

::google::protobuf::uint8* SendToPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGateServer.SendToPlayer)
  // required int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGateServer.SendToPlayer)
  return target;
}

int SendToPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendToPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendToPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendToPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendToPlayer::MergeFrom(const SendToPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendToPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToPlayer::CopyFrom(const SendToPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendToPlayer::Swap(SendToPlayer* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendToPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendToPlayer_descriptor_;
  metadata.reflection = SendToPlayer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoGateServer

// @@protoc_insertion_point(global_scope)
